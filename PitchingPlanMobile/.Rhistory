#   scale_fill_distiller(palette = "Spectral") +
#   geom_path(lwd=1.5, col="black") +
#   coord_fixed()+labs(title="Swing Rates")
#
# all_splits[[1]]$predict <- exp(predict(fit,all_splits[[1]]))/(1 + exp(predict(fit,all_splits[[1]])))
#
# all_predict <- rbind(all_predict,all_splits[[1]])
x <- predict_swing(1)
View(x)
all_predict <- all_pitches_trim[FALSE,]
all_predict$predict <- numeric()
# define the strike zone
# topKzone <- 3.5
# botKzone <- 1.6
# inKzone <- -0.95
# outKzone <- 0.95
# kZone <- data.frame(
#   x=c(inKzone, inKzone, outKzone, outKzone, inKzone),
#   y=c(botKzone, topKzone, topKzone, botKzone, botKzone)
# )
predict_swing <- function(x)
{
fit <- gam(swing ~ s(plate_x,plate_z), family=binomial, data=all_splits[[x]])
all_splits[[x]]$predict <- exp(predict(fit,all_splits[[x]]))/(1 + exp(predict(fit,all_splits[[x]])))
all_predict <- rbind(all_predict,all_splits[[x]])
}
#fit <- gam(swing ~ s(plate_x,plate_z), family=binomial, data=all_splits[[1]])
# find predicted probabilities over a 50 x 50 grid
# plate_x <- seq(-1.5, 1.5, length.out=100)
# plate_z <- seq(1.4, 3.75, length.out=100)
# data.predict <- data.frame(plate_x = c(outer(plate_x, plate_z * 0 + 1)),
#                            plate_z = c(outer(plate_x * 0 + 1, plate_z)))
# lp <- predict(fit, data.predict)
# data.predict$Probability <- exp(lp) / (1 + exp(lp))
#
# ggplot(kZone, aes(x, y)) +
#   geom_tile(data=data.predict,
#             aes(x=plate_x, y=plate_z, fill= Probability)) +
#   scale_fill_distiller(palette = "Spectral") +
#   geom_path(lwd=1.5, col="black") +
#   coord_fixed()+labs(title="Swing Rates")
#
# all_splits[[1]]$predict <- exp(predict(fit,all_splits[[1]]))/(1 + exp(predict(fit,all_splits[[1]])))
#
# all_predict <- rbind(all_predict,all_splits[[1]])
x <- predict_swing(1)
length(all_splits)
all_data <- comps_all <- lapply(1:length(all_splits), predict_swing)
all_splits[[10]]
all_splits[[9]]
all_splits[[30]]
# ggplot(kZone, aes(x, y)) +
#   geom_tile(data=data.predict,
#             aes(x=plate_x, y=plate_z, fill= Probability)) +
#   scale_fill_distiller(palette = "Spectral") +
#   geom_path(lwd=1.5, col="black") +
#   coord_fixed()+labs(title="Swing Rates")
#
# all_splits[[1]]$predict <- exp(predict(fit,all_splits[[1]]))/(1 + exp(predict(fit,all_splits[[1]])))
#
# all_predict <- rbind(all_predict,all_splits[[1]])
x <- predict_swing(30)
predict_swing <- function(x)
{
if(length(all_splits[[x]]) < 100)
{
fit <- gam(swing ~ s(plate_x,plate_z), family=binomial, data=all_splits[[x]])
all_splits[[x]]$predict <- exp(predict(fit,all_splits[[x]]))/(1 + exp(predict(fit,all_splits[[x]])))
all_predict <- rbind(all_predict,all_splits[[x]])
}
}
x <- predict_swing(30)
predict_swing <- function(x)
{
if(length(all_splits[[x]]) > 100)
{
fit <- gam(swing ~ s(plate_x,plate_z), family=binomial, data=all_splits[[x]])
all_splits[[x]]$predict <- exp(predict(fit,all_splits[[x]]))/(1 + exp(predict(fit,all_splits[[x]])))
all_predict <- rbind(all_predict,all_splits[[x]])
}
}
x <- predict_swing(30)
all_predict <- all_pitches_trim[FALSE,]
all_predict$predict <- numeric()
all_data <- comps_all <- lapply(1:length(all_splits), predict_swing)
length(all_splits[[1]])
nrow(all_splits[[1]])
predict_swing <- function(x)
{
if(nrow(all_splits[[x]]) > 100)
{
fit <- gam(swing ~ s(plate_x,plate_z), family=binomial, data=all_splits[[x]])
all_splits[[x]]$predict <- exp(predict(fit,all_splits[[x]]))/(1 + exp(predict(fit,all_splits[[x]])))
all_predict <- rbind(all_predict,all_splits[[x]])
}
}
all_data <- comps_all <- lapply(1:length(all_splits), predict_swing)
View(all_data)
all_data <- data.frame(unlist(all_data))
View(all_data)
all_data <- do.call("rbind", comps_all)
View(all_data)
install.packages("lme4")
library(lme4)
model <- lmer(swing ~ predict + (1|pitcher) + (1|batter),
data = all_data)
model
summary(model)
ranef(model)
View(all_data)
in_zone <- all_data %>% filter(zone == 1 | zone == 2 | zone == 3 | zone == 4 | zone == 5 | zone == 6 | zone == 7 | zone == 8 |zone == 9)
out_of_zone <- all_data %>% filter(zone == 10 | zone == 11 | zone == 12 | zone == 13)
model_zone <- lmer(swing ~ predict + (1|pitcher) + (1|batter),
data = in_zone)
model_out_of_zone <- lmer(swing ~ predict + (1|pitcher) + (1|batter),
data = out_of_zone)
summary(model_zone)
summary(model_out_of_zone)
ranef(model_out_of_zone)
View(out_of_zone)
in_zone_rates <- in_zone %>% group_by(player_name, pitcher) %>%
arrange(player_name, pitcher) %>%
summarise(Swing_Rate = mean(swing),
zSwing_rate = mean(predict))
View(in_zone_rates)
date <- as.Date("2019-03-19")
all_pitches <- scrape_statcast_savant(start_date = date,
end_date = date, player_type = "pitcher")
while(date < as.Date("2019-09-30"))
{
test <- scrape_statcast_savant(start_date = date,
end_date = date + 10, player_type = "pitcher")
all_pitches <- rbind(all_pitches,test)
date <- date + 10
}
all_pitches <- all_pitches %>% distinct()
all_pitches_trim <- all_pitches[,c("pitch_type",
"player_name",
"batter",
"pitcher",
"description",
"zone",
"stand",
"p_throws",
"balls",
"strikes",
"plate_x",
"plate_z",
"fielder_2",
"woba_value")]
all_pitches_trim <- mutate(all_pitches_trim, swing=ifelse(description %in% c("hit_into_play", "foul","swinging_strike", "hit_into_play_score", "hit_into_play_no_out", "foul_tip", "swinging_strike_blocked"),
1, 0))
all_pitches_trim <- all_pitches_trim[!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z)  | !(is.na(all_pitches_trim$pitch_type)),]
all_pitches_trim <- all_pitches_trim[(!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z)  | !(is.na(all_pitches_trim$pitch_type))),]
all_pitches_trim <- all_pitches_trim[(!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z) | !(is.na(all_pitches_trim$pitch_type))),]
all_pitches_trim <- all_pitches_trim[(!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z) | !(is.na(all_pitches_trim$pitch_type)))]
all_pitches_trim <- all_pitches_trim[c(!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z) | !(is.na(all_pitches_trim$pitch_type))),]
c(!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z) | !(is.na(all_pitches_trim$pitch_type)))
all_pitches_trim <- all_pitches_trim[c(!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z)) | !(is.na(all_pitches_trim$pitch_type))),]
all_pitches_trim <- all_pitches_trim[!(is.na(all_pitches_trim$plate_x)) | !(is.na(all_pitches_trim$plate_z)) | !(is.na(all_pitches_trim$pitch_type)),]
all_pitches_trim <- mutate(all_pitches_trim, pitch_group=ifelse(pitch_type %in% c("FF", "FT","FC", "SI"),
"Fastball", ifelse(pitch_type %in% c("SL", "EP","CU", "KN", "KC"),
"Breaking", "OffSpeed")))
all_pitches_trim$count <- paste(all_pitches_trim$balls,"-",all_pitches_trim$strikes)
all_splits <- split(all_pitches_trim, with(all_pitches_trim, interaction(pitch_group,count)), drop = TRUE)
list2env(all_splits,envir=.GlobalEnv)
all_predict <- all_pitches_trim[FALSE,]
all_predict$predict <- numeric()
# define the strike zone
# topKzone <- 3.5
# botKzone <- 1.6
# inKzone <- -0.95
# outKzone <- 0.95
# kZone <- data.frame(
#   x=c(inKzone, inKzone, outKzone, outKzone, inKzone),
#   y=c(botKzone, topKzone, topKzone, botKzone, botKzone)
# )
predict_swing <- function(x)
{
if(nrow(all_splits[[x]]) > 100)
{
fit <- gam(swing ~ s(plate_x,plate_z), family=binomial, data=all_splits[[x]])
all_splits[[x]]$predict <- exp(predict(fit,all_splits[[x]]))/(1 + exp(predict(fit,all_splits[[x]])))
all_predict <- rbind(all_predict,all_splits[[x]])
}
}
#fit <- gam(swing ~ s(plate_x,plate_z), family=binomial, data=all_splits[[1]])
# find predicted probabilities over a 50 x 50 grid
# plate_x <- seq(-1.5, 1.5, length.out=100)
# plate_z <- seq(1.4, 3.75, length.out=100)
# data.predict <- data.frame(plate_x = c(outer(plate_x, plate_z * 0 + 1)),
#                            plate_z = c(outer(plate_x * 0 + 1, plate_z)))
# lp <- predict(fit, data.predict)
# data.predict$Probability <- exp(lp) / (1 + exp(lp))
#
# ggplot(kZone, aes(x, y)) +
#   geom_tile(data=data.predict,
#             aes(x=plate_x, y=plate_z, fill= Probability)) +
#   scale_fill_distiller(palette = "Spectral") +
#   geom_path(lwd=1.5, col="black") +
#   coord_fixed()+labs(title="Swing Rates")
#
# all_splits[[1]]$predict <- exp(predict(fit,all_splits[[1]]))/(1 + exp(predict(fit,all_splits[[1]])))
#
# all_predict <- rbind(all_predict,all_splits[[1]])
x <- predict_swing(30)
all_data <- lapply(1:length(all_splits), predict_swing)
all_data <- do.call("rbind", all_data)
in_zone <- all_data %>% filter(zone == 1 | zone == 2 | zone == 3 | zone == 4 | zone == 5 | zone == 6 | zone == 7 | zone == 8 |zone == 9)
out_of_zone <- all_data %>% filter(zone == 10 | zone == 11 | zone == 12 | zone == 13)
model_zone <- lmer(swing ~ predict + (1|pitcher) + (1|batter),
data = in_zone)
model_out_of_zone <- lmer(swing ~ predict + (1|pitcher) + (1|batter),
data = out_of_zone)
ranef(model_out_of_zone)
summary(model_out_of_zone)
summary(model_in_zone)
summary(model_zone)
in_zone_rates <- in_zone %>% group_by(player_name, pitcher) %>%
arrange(player_name, pitcher) %>%
summarise(Swing_Rate = mean(swing),
zSwing_rate = mean(predict))
View(in_zone_rates)
in_zone_rates$diff <- in_zone_rates$Swing_Rate - in_zone_rates$zSwing_rate
View(in_zone_rates)
in_zone_rates <- in_zone %>% group_by(player_name, pitcher) %>%
arrange(player_name, pitcher) %>%
summarise(Pitches = n(),
Swing_Rate = mean(swing),
xSwing_rate = mean(predict)) %>%
filter(Pitches >= 100)
in_zone_rates$diff <- in_zone_rates$Swing_Rate - in_zone_rates$zSwing_rate
in_zone_rates <- in_zone %>% group_by(player_name, pitcher) %>%
arrange(player_name, pitcher) %>%
summarise(Pitches = n(),
Swing_Rate = mean(swing),
xSwing_rate = mean(predict)) %>%
filter(Pitches >= 100)
in_zone_rates$diff <- in_zone_rates$Swing_Rate - in_zone_rates$xSwing_rate
out_of_zone_pitchers <- ranef(model_out_of_zone)$pitcher
View(out_of_zone_pitchers)
out_of_zone_rates <- out_of_zone %>% group_by(player_name, pitcher) %>%
arrange(player_name, pitcher) %>%
summarise(Pitches = n(),
Swing_Rate = mean(swing),
xSwing_rate = mean(predict)) %>%
filter(Pitches >= 100)
out_of_zone_rates$diff <- out_of_zone_rates$Swing_Rate - out_of_zone_rates$xSwing_rate
View(out_of_zone_pitchers)
View(out_of_zone_rates)
install.packages("rvest")
install.packages("V8")
library(rvest)
library(V8)
ct <- v8()
#parse the html content from the js output and print it as text
read_html(ct$eval(gsub('document.write','',firstnames))) %>%
html_text()
firstnames <- read_html(link) %>% html_nodes(".fname ng-binding") %>% html_nodes('script') %>% html_text()
# Create a new v8 context
ct <- v8()
#parse the html content from the js output and print it as text
read_html(ct$eval(gsub('document.write','',firstnames))) %>%
html_text()
#URL with js-rendered content to be scraped
link <- 'https://draft.shgn.com/nfc/plain/dp/559/grid'
#Read the html page content and extract all javascript codes that are inside a list
firstnames <- read_html(link) %>% html_nodes(".fname ng-binding") %>% html_nodes('script') %>% html_text()
# Create a new v8 context
ct <- v8()
#parse the html content from the js output and print it as text
read_html(ct$eval(gsub('document.write','',firstnames))) %>%
html_text()
link <- 'https://draft.shgn.com/nfc/plain/dp/559/grid'
#Read the html page content and extract all javascript codes that are inside a list
firstnames <- read_html(link) %>% html_nodes(".fname ng-binding")  %>% html_text()
# Create a new v8 context
ct <- v8()
#parse the html content from the js output and print it as text
read_html(ct$eval(gsub('document.write','',firstnames))) %>%
html_text()
#parse the html content from the js output and print it as text
read_html(ct$eval(gsub('document.write','',firstnames)))
# Create a new v8 context
ct <- v8()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
library(googlesheets4)
setwd("~/GitHub/PitchingPlan/PitchingPlan")
sheets_auth(
email = "pmammino18@gmail.com")
ideals <- read_sheet("https://docs.google.com/spreadsheets/d/1OKspMLQyR0LdI889pzpjoHqgpJDIiNlR9eTf9XNxpUo/edit#gid=0")
rapsodo <- read_sheet("https://docs.google.com/spreadsheets/d/1IJwrKgo2N8SSWmOEHmaNICxG6Nx2RPQppaI2ozz7LhI/edit#gid=0")
handedness <- read_sheet("https://docs.google.com/spreadsheets/d/1vttEPw3x9vLs7XY1c7YEW-VIc9uM1l4neDHY7icELVk/edit#gid=0")
monthlyplan <- read_sheet("https://docs.google.com/spreadsheets/d/1ovHuTCKfAjPnNYhAA6anlm_t0vM9hShvoX5Zd_IBGho/edit#gid=0")
monthlyplan <- data.frame(monthlyplan)
pre_post <- read_sheet("https://docs.google.com/spreadsheets/d/1ftejSW4anTwFeulb66EJLOuNldjLouU5twJ9eMShu6s/edit#gid=0")
groups<- read_sheet("https://docs.google.com/spreadsheets/d/1lKOTTEDnQ7zLLlOZ62R5vAOmkgBxw-OYbm_J7r30spo/edit#gid=0")
throwingkey <- read_sheet("https://docs.google.com/spreadsheets/d/1bCV7o-CDOEQYgCE7ditbymWbL-JrItV60vrikHy1-D4/edit#gid=0")
saveRDS(ideals,"ideals.rds")
saveRDS(rapsodo,"rapsodo.rds")
saveRDS(handedness,"handedness.rds")
saveRDS(monthlyplan,"monthlyplan.rds")
saveRDS(pre_post,"pre_post.rds")
saveRDS(groups,"groups.rds")
saveRDS(throwingkey, "throwingkey.rds")
throwingkey <- readRDS("throwingkey.rds")
library(shiny)
library(tidyverse)
library(ggplot2)
library(mgcv)
library(REdaS)
library(gridExtra)
library(googlesheets4)
library(chron)
library(stringr)
library(gt)
library(glue)
library(plotly)
View(monthlyplan)
View(pre_post)
View(throwingkey)
throwing_key <- gt(throwingkey,
rowname_col = "Day",
groupname_col = "Drill")  %>%
tab_header(
title = "Throwing Key") %>%
tab_options(heading.title.font.weight = "bold",) %>%
cols_label(
Reps = "") %>%
tab_style(style = list(
cell_fill(color = "darkgreen"),
cell_text(weight = "bold", color = "white")
),locations = cells_row_groups(groups = unique(throwingkey$Day)))
View(throwingkey)
throwingkey <- data.frame(throwingkey)
throwing_key <- gt(throwingkey,
rowname_col = "Day",
groupname_col = "Drill")  %>%
tab_header(
title = "Throwing Key") %>%
tab_options(heading.title.font.weight = "bold",) %>%
cols_label(
Reps = "") %>%
tab_style(style = list(
cell_fill(color = "darkgreen"),
cell_text(weight = "bold", color = "white")
),locations = cells_row_groups(groups = unique(throwingkey$Day)))
throwingkey <- read_sheet("https://docs.google.com/spreadsheets/d/1bCV7o-CDOEQYgCE7ditbymWbL-JrItV60vrikHy1-D4/edit#gid=0")
saveRDS(throwingkey, "throwingkey.rds")
throwing_key <- gt(throwingkey,
rowname_col = "Drill",
groupname_col = "Day")  %>%
tab_header(
title = "Throwing Key") %>%
tab_options(heading.title.font.weight = "bold",) %>%
cols_label(
Reps = "") %>%
tab_style(style = list(
cell_fill(color = "darkgreen"),
cell_text(weight = "bold", color = "white")
),locations = cells_row_groups(groups = unique(throwingkey$Day)))
throwing_key
View(throwingkey)
throwing_key <- gt(throwingkey,
rowname_col = "Drill",
groupname_col = "Day")  %>%
tab_header(
title = "Throwing Key") %>%
tab_options(heading.title.font.weight = "bold",) %>%
tab_style(style = list(
cell_fill(color = "darkgreen"),
cell_text(weight = "bold", color = "white")
),locations = cells_row_groups(groups = unique(throwingkey$Day)))
throwing_key
View(pre_post)
runApp()
View(throwingkey)
throwingkey <- read_sheet("https://docs.google.com/spreadsheets/d/1bCV7o-CDOEQYgCE7ditbymWbL-JrItV60vrikHy1-D4/edit#gid=0")
saveRDS(throwingkey, "throwingkey.rds")
throwingkey <- readRDS("throwingkey.rds")
View(throwingkey)
throwingkey <- data.frame(throwingkey)
throwing_key <- gt(throwingkey,
rowname_col = "Drill",
groupname_col = "Day")  %>%
tab_header(
title = "Throwing Key") %>%
tab_options(heading.title.font.weight = "bold",) %>%
tab_style(style = list(
cell_fill(color = "darkgreen"),
cell_text(weight = "bold", color = "white")
),locations = cells_row_groups(groups = unique(throwingkey$Day)))
throwing_key
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
library(plotly)
library(reshape)
library(devtools)
library(tidyverse)
library(baseballr)
library(ggplot2)
library(mgcv)
library(REdaS)
library(gridExtra)
library(lme4)
library(Hmisc)
setwd("~/GitHub/plate_discipline")
master <- read.csv("master.csv")
master <- master[,c("fg_id","mlb_id")]
master$fg_id <- as.numeric(as.character(master$fg_id))
master$mlb_id <- as.numeric(as.character(master$mlb_id))
all_seasons <- readRDS("plate_discipline_all_woba.rds")
all_seasons <- all_seasons[,c("pitcher",
"player_name",
"Season",
"Pitches",
"IZ",
"OOZ",
"In_Whiff",
"In_wOBA",
"Command",
"StuffERA")]
results_2019 <- fg_pitch_leaders(2019,2019,qual = 20)
results_2019 <- results_2019[,c("playerid",
"Seasons",
"Name",
"IP",
"ERA",
"FIP",
"xFIP")]
results_2018 <- fg_pitch_leaders(2018,2018,qual = 20)
results_2018 <- results_2018[,c("playerid",
"Seasons",
"Name",
"IP",
"ERA",
"FIP",
"xFIP")]
results_2017 <- fg_pitch_leaders(2017,2017,qual = 20)
results_2017 <- results_2017[,c("playerid",
"Seasons",
"Name",
"IP",
"ERA",
"FIP",
"xFIP")]
results_2016 <- fg_pitch_leaders(2016,2016,qual = 20)
results_2016 <- results_2016[,c("playerid",
"Seasons",
"Name",
"IP",
"ERA",
"FIP",
"xFIP")]
results_2015 <- fg_pitch_leaders(2015,2015,qual = 20)
results_2015 <- results_2015[,c("playerid",
"Seasons",
"Name",
"IP",
"ERA",
"FIP",
"xFIP")]
results_all_seasons <- rbind(results_2015,results_2016,results_2017,results_2018,results_2019)
results_all_seasons$playerid <- as.numeric(results_all_seasons$playerid)
results_all_seasons <- left_join(results_all_seasons,master, by = c("playerid" = "fg_id"))
results_all_seasons_NA <- results_all_seasons %>%
filter(is.na(mlb_id))
results_all_seasons_NA <- left_join(results_all_seasons_NA, all_seasons[,c("pitcher", "player_name")], by = c("Name" = "player_name"))
results_all_seasons_NA <- distinct(results_all_seasons_NA)
results_all_seasons_NA$mlb_id <- results_all_seasons_NA$pitcher
results_all_seasons_NA <- results_all_seasons_NA[,c("playerid",
"Seasons",
"Name",
"IP",
"ERA",
"FIP",
"xFIP",
"mlb_id")]
results_all_seasons <- rbind(results_all_seasons,results_all_seasons_NA)
results_all_seasons <- results_all_seasons %>%
filter(!is.na(mlb_id))
results_all_seasons$Seasons <- as.numeric(results_all_seasons$Seasons)
results_all_seasons_Stuff <- left_join(results_all_seasons,all_seasons, by = c("mlb_id" = "pitcher", "Seasons" = "Season"))
results_all_seasons_Stuff$StuffDiff <- results_all_seasons_Stuff$ERA - results_all_seasons_Stuff$StuffERA
all_seasons_pt <- readRDS("all_results_allpitches_allseasons.rds")
View(all_seasons_pt)
install.packages("shinymobile")
library(shinymobile)
install.packages("shinyMobile")
library(shinyMobile)
runApp('~/GitHub/PitchingPlan/PitchingPlanMobile')
runApp('~/GitHub/PitchingPlan/PitchingPlanMobile')
runApp('~/GitHub/PitchingPlan/PitchingPlanMobile')
runApp('~/GitHub/PitchingPlan/PitchingPlanMobile')
runApp('~/GitHub/PitchingPlan/PitchingPlanMobile')
runApp()
runApp()
runApp('~/GitHub/PitchingPlan/PitchingPlanMobile')
rsconnect::deployApp()
setwd("~/GitHub/PitchingPlan/PitchingPlanMobile")
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
